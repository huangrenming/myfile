'use strict';
33333333333333333333333
var gulp = require('gulp');
var pathFn = require('path');

var $ = require('gulp-load-plugins')({
    pattern: ['gulp-*', 'minimist']
});

var handleError = function(err) {
    $.util.log(err.toString());
    this.emit('end');
};

var CONFIG = $.minimist(process.argv.slice(2), {
    string: 'env',
    default: {
        env: 'development'
    }
});

var isTransfer = (CONFIG.env == 'prepub' || CONFIG.env == 'production' || CONFIG.env == 'test') ? true : false;

gulp.task('tpl', function() {
    return gulp.src(['views/**/*.html'])
        .pipe($.tmod({
            base: 'views',
            output: 'public/js/tpl',
            minify: false,
            combo: false,
            compress: false
        }))
        .pipe($.size());
});

gulp.task('styles', function() {
    $.util.log('> Env: ', CONFIG.env);

    var scssEnvFile = pathFn.resolve('public/scss', CONFIG.env);

    return gulp.src('public/scss/**/*.scss')
        .pipe($.sass({
            style: 'expanded',
            includePaths: [scssEnvFile]
        }))
        .on('error', handleError)
        .pipe($.autoprefixer('last 2 version', 'safari 5', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))
        .on('error', handleError)
        .pipe(gulp.dest('public/style'))
        .pipe($.size());
});

gulp.task('scripts', function() {
    return gulp.src(['public/js/*/*.js', '!public/js/tpl/**/*', '!public/js/common/**/*'])
        .pipe($.jshint())
        .pipe($.jshint.reporter('jshint-stylish'))
        .pipe($.size());
});

gulp.task('images', function() {
    return gulp.src('public/image/*')
        .pipe($.cache($.imagemin({
            optimizationLevel: 3,
            progressive: true,
            interlaced: true
        })))
        .pipe(gulp.dest('build/public/image'))
        .pipe($.size());
});

gulp.task('assetsFix', function(cb) {
    var build = isTransfer ? "build/public/userfiles/cms" : 'build/public';

    return gulp.src('build/public/**/*')
        .pipe($.if(isTransfer, gulp.dest(build)))
        .pipe($.size());
});

gulp.task('assetsClean', function(cb) {
    return gulp.src(['build/public/image', 'build/public/js', 'build/public/style'], {
            read: false
        })
        .pipe($.if(isTransfer, $.rimraf()))
        .pipe($.size());
});

function isTpl(file){
    return /\.(html|ejs|htm)$/.test(file.path);
}

gulp.task('html', function() {
    return gulp.src('views/**/*')
        .pipe($.inlineSource({
            rootpath: 'public',
            pretty: true,
            compress: false
        }))

        .pipe($.useref({
            searchPath: 'public'
        }))
        .pipe($.rev())

        .pipe($.if('*.js', $.uglify({
            preserveComments: 'some',
            output: {
                beautify: true
            }
        })))
        .pipe($.if('*.css', $.cssnano()))

        .pipe($.if('*.css', gulp.dest('build/public')))
        .pipe($.if('*.js', gulp.dest('build/public')))

        .pipe($.revReplace({
            prefix: '{{cmsCdn}}'
        }))

        .pipe($.if(isTpl, $.rename(function(path) {
            path.basename = path.basename.replace(/-[a-z0-9]+$/, '');
            return path;
        })))
        .pipe($.if(isTpl, gulp.dest('build/views')))

        .pipe($.size());
});
